{"/home/travis/build/npmtest/node-npmtest-electrolyte/test.js":"/* istanbul instrument in package npmtest_electrolyte */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-electrolyte/lib.npmtest_electrolyte.js":"/* istanbul instrument in package npmtest_electrolyte */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_electrolyte = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_electrolyte = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-electrolyte/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-electrolyte && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_electrolyte */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_electrolyte\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_electrolyte.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_electrolyte.rollup.js'] =\n            local.assetsDict['/assets.npmtest_electrolyte.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_electrolyte.__dirname + '/lib.npmtest_electrolyte.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-electrolyte/node_modules/electrolyte/lib/index.js":"// Load modules.\nvar Container = require('./container')\n  , deprecate = require('depd')('electrolyte');\n\n\nexports = module.exports = new Container();\n\n// Exports.\nexports.Container = Container;\n\nexports.fs =\nexports.dir = require('./sources/dir');\nexports.node = deprecate.function(exports.dir, 'Container#node: Use Container#dir instead');\n\nexports.node_modules = require('./sources/node_modules');\n","/home/travis/build/npmtest/node-npmtest-electrolyte/node_modules/electrolyte/lib/container.js":"// Load modules.\nvar EventEmitter = require('events')\n  , util = require('util')\n  , path = require('canonical-path')\n  , Promise = require('promise')\n  , FactorySpec = require('./patterns/factory')\n  , ConstructorSpec = require('./patterns/constructor')\n  , LiteralSpec = require('./patterns/literal')\n  , InjectedContainer = require('./injectedcontainer')\n  , SpecNotFoundError = require('./errors/specnotfound')\n  , deprecate = require('depd')('electrolyte')\n  , debug = require('debug')('electrolyte');\n\n\n/**\n * Manages objects within an application.\n *\n * A container creates and manages the set of objects within an application.\n * Using inversion of control principles, a container automatically instantiates\n * and assembles these objects.\n *\n * Objects are created from a specification.  A specification defines the\n * requirements needed in order to create an object.  Such requirements include\n * the objects required by the object being created.  When an object requires\n * other objects, the required objects will be created prior to the requiring\n * object, and so on, transitively assembling the complete graph of objects as\n * necessary.\n *\n * @constructor\n * @api public\n */\nfunction Container() {\n  EventEmitter.call(this);\n  this._specs = {};\n  this._sources = {};\n  this._order = [];\n  this._resolvers = [];\n  \n  this.resolver(require('./resolvers/id')());\n}\n\n// Inherit from `EventEmitter`.\nutil.inherits(Container, EventEmitter);\n\n\n/**\n * Utilize a source of objects.\n *\n * The container creates a objects from object sources.  Sources are typically\n * a directory on the file system or a package of objects that are specifically\n * designed to function together.\n *\n * @param {string} ns - The namespace under which to mount the source.\n * @param {function} fn - Loader of object specifications from the source.\n * @public\n */\nContainer.prototype.use = function(ns, s, options) {\n  if (typeof ns !== 'string') {\n    options = s;\n    s = ns;\n    ns = '';\n  }\n  options = options || {};\n  \n  var load = s\n    , manifest = {}\n    , ids, aid, spec, i, len;\n  \n  if (typeof s == 'object') {\n    manifest = s;\n    load = s.load || function noop(id) { return; };\n  }\n  \n  if (typeof load != 'function') {\n    throw new Error(\"Container#use requires a load function, was passed a '\" + (typeof load) + \"'\");\n  }\n  \n  var h = this._order.length;\n  var source = { namespace: ns, load: load };\n  this._sources[h] = source;\n  this._order.unshift(h);\n  \n  ids = Object.keys(manifest);\n  for (i = 0, len = ids.length; i < len; ++i) {\n    aid = path.join(source.namespace, ids[i]);\n    spec = manifest[ids[i]];\n    if (spec === load) { continue; }\n    this._registerSpec(aid, spec, source);\n  }\n  \n  return this;\n}\nContainer.prototype.loader = deprecate.function(Container.prototype.use, 'Container#loader: Use Container#use instead');\n\n/**\n * Create an object.\n *\n * Creates an object from the specifications registered with the container.\n * When the object being created requires other objects, the required objects\n * will automatically be created and injected into the requiring object.  In\n * this way, complex graphs of objects can be created in a single single line of\n * code, eliminating extraneous boilerplate.\n *\n * A specification can declare an object to be a singleton.  In such cases, only\n * one instance of the object will be created.  Subsequent calls to create the\n * object will return the singleton instance.\n *\n * Examples:\n *\n *     var foo = IoC.create('foo');\n *\n *     var boop = IoC.create('beep/boop');\n *\n * @param {string} id - The id of the object to create.\n * @param {Spec} [parent] - (private) The parent specification requiring the object.\n * @returns {Promise}\n * @public\n */\nContainer.prototype.create = function(id, parent) {\n  return this._create(id, parent);\n};\n\nContainer.prototype._create = function(id, parent) {\n  var psource = parent ? parent._source : undefined;\n  \n  // built-ins\n  switch (id) {\n  case '!container':\n    return Promise.resolve(new InjectedContainer(this, parent, psource && psource.namespace));\n  }\n  \n  return new Promise(function(resolve, reject) {\n    if (parent && id[0] == '.') {\n      // resolve relative component ID\n      id = path.join(path.dirname(parent.id), id);\n    }\n    id = this.resolve(id, parent);\n  \n    var spec = this._specs[id];\n    if (spec) {\n      return resolve(spec.create(this));\n    } else {\n      var self = this;\n      this._loadSpec(id, function(err, spec) {\n        if (err && err.code == 'SPEC_NOT_FOUND') {\n          reject(new Error('Unable to create object \"' + id + '\" required by: ' + (parent && parent.id || 'unknown')));\n        } else if (err) {\n          return reject(err);\n        }\n        resolve(spec.create(self))\n      });\n    }\n  }.bind(this));\n}\n\nContainer.prototype.specs = function() {\n  // TODO: Wrap specs so they can be created in an optimzied way\n  \n  var ids = Object.keys(this._specs)\n    , specs = []\n    , i, len;\n  for (i = 0, len = ids.length; i < len; ++i) {\n    specs.push(this._specs[ids[i]]);\n  }\n  return specs;\n}\n\nContainer.prototype.resolve = function(id, parent) {\n  var resolvers = this._resolvers\n    , fn, rid, i, len;\n  for (i = 0, len = resolvers.length; i < len; ++i) {\n    fn = resolvers[i];\n    rid = fn(id, parent && parent.id);\n    if (rid) { return rid; }\n  }\n  throw new Error('Unable to resolve interface \"' + id + '\" required by: ' + (parent && parent.id || 'unknown'));\n}\n\n\nContainer.prototype.resolver = function(fn) {\n  this._resolvers.push(fn);\n}\n\n/**\n * Load object specification.\n *\n * As a prerequisite for creating an object, an object specification must be\n * available.  The specification declares instructions about how to create an\n * object, such as whether the object should be a singleton instance and any\n * other objects required by the object to be created.\n *\n * Object instances will be created by invoking the specification's factory\n * function.  A factory function is typically a function that returns the\n * object or a constructor that is invoked using the `new` operator.\n *\n * @param {string} id - The id of the specification to load.\n * @private\n */\nContainer.prototype._loadSpec = function(id, cb) {\n  debug('autoload %s', id);\n  var order = this._order\n    , source, mod, rid\n    , i, len;\n  \n  for (i = 0, len = order.length; i < len; ++i) {\n    source = this._sources[order[i]];\n    rid = path.relative(source.namespace, id);\n    if (rid.indexOf('../') == 0) { continue; }\n    mod = source.load(rid);\n  \n    if (mod) {\n      spec = this._registerSpec(id, mod, source);\n      return cb(null, spec);\n    }\n  }\n  return cb(new SpecNotFoundError('Cannot find spec \"' + id + '\"'));\n}\n\n/**\n * Register object specification.\n *\n * When a specification is registered, the creational pattern used to create\n * instances of the object will be determined.  Creational patterns include\n * factory functions which return an object and constructors that are invoked\n * using the `new` operator.\n *\n * Additionally, common annotations needed when creating the instance are\n * examined.  Such annotations include `@require`, which is used to declare\n * other objects required by this object and `@singleton` which is set to\n * `true` to indicate that only a single instance of the object should be\n * created.  Other annotations may be declared, but such annotations are not\n * interpreted by the IoC container and are intended to be used by higher-level\n * frameworks.\n *\n * @param {string} id - The id of the specification to load.\n * @param {object} mod - The module containing the object factory.\n * @param {number} hs - The handle of the source from which the spec was loaded.\n * @private\n */\nContainer.prototype._registerSpec = function(id, mod, source) {\n  var spec, pattern;\n  \n  if (mod['@literal']) {\n    pattern = 'literal';\n  } else if (typeof mod == 'function') {\n    // The module exports a function.  If the function name begins with a\n    // capital letter, it will be treated as a constructor.  Otherwise, it will\n    // be treated as a factory function;\n    var name = mod.name || 'anonymous';\n    if (name[0] == name[0].toUpperCase()) {\n      pattern = 'constructor';\n    } else {\n      pattern = 'factory';\n    }\n  }\n  \n  switch (pattern) {\n  case 'factory':\n    debug('register factory %s', id);\n    spec = new FactorySpec(id, mod, source);\n    break;\n  case 'constructor':\n    debug('register constructor %s', id);\n    spec = new ConstructorSpec(id, mod, source);\n    break;\n  case 'literal':\n  default:\n    debug('register literal %s', id);\n    spec = new LiteralSpec(id, mod, source);\n    break;\n  }\n  \n  this._specs[spec.id] = spec;\n  return spec;\n}\n\n\n// Expose constructor.\nmodule.exports = Container;\n","/home/travis/build/npmtest/node-npmtest-electrolyte/node_modules/electrolyte/lib/patterns/factory.js":"// Load modules.\nvar Spec = require('../spec')\n  , util = require('util')\n  , debug = require('debug')('electrolyte');\n\n\n/**\n * A specification using a factory function.\n *\n * Objects will be created by calling the factory function with any required\n * dependencies and returning the result.\n *\n * @constructor\n * @param {string} id - The id of the specification.\n * @param {object} mod - The module containing the object factory.\n * @param {number} hs - The handle of the source from which the spec was loaded.\n * @protected\n */\nfunction FactorySpec(id, fn, hs) {\n  Spec.call(this, id, fn, hs);\n  this._fn = fn;\n}\n\n// Inherit from `Spec`.\nutil.inherits(FactorySpec, Spec);\n\n/**\n * Instantiate an object from the specification.\n *\n * @private\n */\nFactorySpec.prototype.instantiate = function() {\n  debug('instantiate %s', this.id);\n  \n  var ctx = {\n    id: this.id,\n    baseNS: this._source.namespace\n  }\n  return this._fn.apply(ctx, arguments);\n}\n\n\n// Expose constructor.\nmodule.exports = FactorySpec;\n","/home/travis/build/npmtest/node-npmtest-electrolyte/node_modules/electrolyte/lib/spec.js":"// Load modules.\nvar debug = require('debug')('electrolyte')\n  , Promise = require('promise');\n\n\n/**\n * A specification of an object.\n *\n * A specification defines how an object is created.  The specification includes\n * a \"factory\" which is used to create objects.  A factory is typically a\n * function which returns the object or a constructor that is invoked with the\n * `new` operator.  A specification also declares any objects required by the\n * object.  Any such required objects will be injected into the object when it\n * is created.\n *\n * A specification also contains annotations, which are used by the IoC\n * container when creating an object.   These annotations are:\n *\n *   - `@require` - Declares other objects needed by this object.\n *   - `@singleton` - Declares whether or not a single instance of this object\n *                    should be created.\n *   - `@implements` - Declares the interfaces implemented by this object.\n *\n * Note that `@implements` is not used directly by Electrolyte.  Rather, it\n * exists to support higher-level frameworks, such as Bixby.js, which encourage\n * component-based programming in which you code to an interface, not an\n * implementation.\n *\n * A specification may contain other annotations, and the complete set of\n * annotations is available under the `.a` hash (short for annotations).  Such\n * annotations are typically used by higher-level frameworks for purposes such\n * as declaring service endpoints and loading plug-ins.\n *\n * @constructor\n * @param {string} id - The id of the specification.\n * @param {object} mod - The module containing the object factory.\n * @param {number} hs - The handle of the source from which the spec was loaded.\n * @protected\n */\nfunction Spec(id, mod, source) {\n  var keys, i, len;\n  \n  this.id = id;\n  this.dependencies = mod['@require'] || [];\n  this.singleton = mod['@singleton'];\n  this.implements = mod['@implements'] || [];\n  if (typeof this.implements == 'string') {\n    this.implements = [ this.implements ]\n  }\n  this.a = {};\n  \n  if (typeof mod === 'object' || typeof mod === 'function') {\n    keys = Object.keys(mod);\n    for (i = 0, len = keys.length; i < len; ++i) {\n      if (keys[i].indexOf('@') == 0) {\n        this.a[keys[i]] = mod[keys[i]];\n      }\n    }\n  }\n  this._source = source;\n}\n\n/**\n * Create an object from the specification.\n *\n * @protected\n */\nSpec.prototype.create = function(container) {\n  debug('create %s', this.id);\n  \n  // Immediately return cached instance.  Optimization for singleton and literal\n  // components.\n  if (this._instance) { return this._instance; }\n  \n  // Create an array of promises which, once resolved, will be an array of\n  // objects that are dependencies of the object being created.\n  var deps = this.dependencies\n    , promises = []\n    , promise, p;\n  for (var i = 0, len = deps.length; i < len; ++i) {\n    promise = container.create(deps[i], this);\n    promises.push(promise);\n  }\n  \n  // Resolve all the promises, and then instantiate the object with its\n  // dependencies.\n  p = Promise.all(promises)\n    .then(function(args) {\n      var i = this.instantiate.apply(this, args);\n      container.emit('create', i, this);\n      \n      // Once the promise has been resolved, cache the object instance if the\n      // spec was annotated as being a singleton.\n      if (this.singleton) { this._instance = i; }\n      return i;\n    }.bind(this));\n  \n  // Cache the promise if the spec was annotated as being a singleton.  This\n  // ensures that a singleton object is resolved, if the object is created\n  // multiple times while waiting for resolution.  Upon the promise being\n  // resolved, the created object will be cached.\n  if (this.singleton) { this._instance = p; }\n  return p;\n}\n\n/**\n * Instantiate an object from the specification.\n *\n * @private\n */\nSpec.prototype.instantiate = function() {\n  throw new Error(\"Spec#instantiate must be overridden by subclass\");\n}\n\n\n// Expose constructor.\nmodule.exports = Spec;\n","/home/travis/build/npmtest/node-npmtest-electrolyte/node_modules/electrolyte/lib/patterns/constructor.js":"// Load modules.\nvar Spec = require('../spec')\n  , util = require('util')\n  , debug = require('debug')('electrolyte');\n\n\n/**\n * A specification using a constructor.\n *\n * Objects will be created by applying the `new` operator to the constructor\n * with any required dependencies and returning the result.\n *\n * @constructor\n * @param {string} id - The id of the specification.\n * @param {object} mod - The module containing the object factory.\n * @param {number} hs - The handle of the source from which the spec was loaded.\n * @protected\n */\nfunction ConstructorSpec(id, ctor, hs) {\n  Spec.call(this, id, ctor, hs);\n  this._ctor = ctor;\n}\n\n// Inherit from `Spec`.\nutil.inherits(ConstructorSpec, Spec);\n\n/**\n * Instantiate an object from the specification.\n *\n * @private\n */\nConstructorSpec.prototype.instantiate = function() {\n  debug('instantiate %s', this.id);\n  var args = [].slice.call(arguments)\n    , ctor = this._ctor;\n  switch (args.length) {\n  case  0: return new ctor();\n  case  1: return new ctor(args[0]);\n  case  2: return new ctor(args[0], args[1]);\n  case  3: return new ctor(args[0], args[1], args[2]);\n  case  4: return new ctor(args[0], args[1], args[2], args[3]);\n  case  5: return new ctor(args[0], args[1], args[2], args[3], args[4]);\n  case  6: return new ctor(args[0], args[1], args[2], args[3], args[4], args[5]);\n  case  7: return new ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);\n  case  8: return new ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);\n  case  9: return new ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]);\n  case 10: return new ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]);\n  }\n  throw new Error(\"Constructor for object '\" + this.id + \"' requires too many arguments\");\n}\n\n\n// Expose constructor.\nmodule.exports = ConstructorSpec;\n","/home/travis/build/npmtest/node-npmtest-electrolyte/node_modules/electrolyte/lib/patterns/literal.js":"// Load modules.\nvar Spec = require('../spec')\n  , util = require('util');\n\n\n/**\n * A specification of an object literal.\n *\n * A literal is returned directly when created by the IoC container.\n *\n * Due to the nature of being a literal, no dependencies are injected and only\n * a single instance of the object will be created.\n *\n * If a module exports a primitive type (object, string, number, etc.), the IoC\n * container will automatically detect it as a literal.  If the module exports\n * a function which is to be treated as a literal, the `@literal` annotation\n * must be set to `true`.  Otherwise, the default behavior will be to treat the\n * function as a factory.\n *\n * @constructor\n * @param {string} id - The id of the specification.\n * @param {object} mod - The module containing the object factory.\n * @param {number} hs - The handle of the source from which the spec was loaded.\n * @protected\n */\nfunction LiteralSpec(id, obj, hs) {\n  Spec.call(this, id, obj, hs);\n  this._instance = obj;\n}\n\n// Inherit from `Spec`.\nutil.inherits(LiteralSpec, Spec);\n\n\n// Expose constructor.\nmodule.exports = LiteralSpec;\n","/home/travis/build/npmtest/node-npmtest-electrolyte/node_modules/electrolyte/lib/injectedcontainer.js":"// Load modules.\nvar path = require('canonical-path')\n  , ExposedSpec = require('./exposedspec');\n\n\n/**\n * Container wrapper used when injected into a factory.\n *\n * When a \"factory\" requires that the container itself be injected, the\n * container is first wrapped.  This wrapper provides an interface that can be\n * used by the factory to introspect its environment, which is useful when\n * loading plugins, among other functionality.  The wrapper also restricts\n * inadvertent use of other functionality in the wrapped container.\n *\n * Note that requiring an injected container makes the requiring object\n * dependent on the IoC runtime's existence.  The need to couple the object to\n * the runtime should be carefully considered, and avoided if an alternative\n * approach is possible.\n *\n * @constructor\n * @api private\n */\nfunction InjectedContainer(c, spec, ns) {\n  this._c = c;\n  this._spec = spec;\n  this._ns = ns || '';\n}\n\n/**\n * Create an object.\n *\n * This function is equivalent to Container#create, with the exception that the\n * object being created must be within the namespace object creating it.\n *\n * @param {string} id - The id of the object to create.\n * @returns {Promise}\n * @public\n */\nInjectedContainer.prototype.create = function(id) {\n  var aid = path.join(this._ns, id);\n  var rid = path.relative(this._ns, aid);\n  if (rid.indexOf('../') == 0) {\n    return Promise.reject(new Error(id + ' not within namespace'));\n  }\n  \n  return this._c.create(aid, this._spec);\n}\n\n/**\n * Introspect object specifications.\n *\n * This function is equivalent to Container#specs, with the exception that the\n * object object specifications returned are restricted to those within the\n * namespace object introspecting them.\n *\n * @returns {array}\n * @public\n */\nInjectedContainer.prototype.specs = function(q) {\n  if (q && !Array.isArray(q)) {\n    q = [ q ];\n  }\n  \n  // Filter the exposed specs to only those that exist within the namespace\n  // of the object being created.\n  var specs = this._c.specs()\n    , exposed = []\n    , spec, rid, i, len;\n  for (i = 0, len = specs.length; i < len; ++i) {\n    spec = specs[i];\n    rid = path.relative(this._ns, spec.id);\n    if (rid.indexOf('../') == 0) { continue; }\n    if (!q) {\n      exposed.push(new ExposedSpec(rid, spec));\n    } else if (spec.implements.some(function(i) { return i == q })) {\n      // The spec implements one of the requested interfaces.\n      exposed.push(new ExposedSpec(rid, spec));\n    }\n  }\n  return exposed;\n}\n\n\n// Expose constructor.\nmodule.exports = InjectedContainer;\n","/home/travis/build/npmtest/node-npmtest-electrolyte/node_modules/electrolyte/lib/exposedspec.js":"function ExposedSpec(id, spec) {\n  this.id = id;\n  this.implements = spec.implements;\n  this.a = spec.a;\n}\n\n\nmodule.exports = ExposedSpec;\n","/home/travis/build/npmtest/node-npmtest-electrolyte/node_modules/electrolyte/lib/errors/specnotfound.js":"/**\n * `SpecNotFound` error.\n *\n * @api public\n */\nfunction SpecNotFoundError(message) {\n  Error.call(this);\n  Error.captureStackTrace(this, arguments.callee);\n  this.name = 'SpecNotFoundError';\n  this.message = message;\n  this.code = 'SPEC_NOT_FOUND';\n}\n\n/**\n * Inherit from `Error`.\n */\nSpecNotFoundError.prototype.__proto__ = Error.prototype;\n\n\n/**\n * Expose `SpecNotFoundError`.\n */\nmodule.exports = SpecNotFoundError;\n","/home/travis/build/npmtest/node-npmtest-electrolyte/node_modules/electrolyte/lib/resolvers/id.js":"/**\n * ID resolver.\n *\n * Resolves object identifiers.  The identifier is resolved to itself, allowing\n * `@require` annotations to directly declare required objects by ID.\n * Identifers must consist solely of alpha-numeric characters, as well as \".\" or\n * \"_\" or \"-\" characters.\n *\n * This is the only resolver built into Electrolyte.  It is expected that\n * higher-level frameworks will add support for resolving interfaces to\n * objects.  Such extensions should mandate the use of a character that is\n * otherwise not valid in an identifer, in order to disambiguate.  For example,\n * this can be done by using URLs, which must include a \":\" character.\n *\n * @return {function}\n * @public\n */\nmodule.exports = function() {\n  \n  return function(id) {\n    if (/^[\\w\\-\\.\\/]+$/.test(id)) {\n      return id;\n    }\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-electrolyte/node_modules/electrolyte/lib/sources/dir.js":"// Load modules.\nvar scripts = require('scripts')\n  , path = require('path')\n  , fs = require('fs')\n  , existsSync = fs.existsSync || path.existsSync // node <=0.6\n\n\n/**\n * Sources objects from a directory.\n *\n * This source allows objects located in a directory on the file system to be\n * created and injected as dependencies.\n *\n * This directory typically contains application-specific objects such as\n * proprietary classes and non-standardized endpoints.\n *\n * Over the course of developing an application, it is normal for objects to\n * start out as application-specific.  After successive iterations, it is common\n * for these objects to be factored into reusable classes with well-defined\n * interfaces.  When that occurs, it is recommended for such classes to be\n * extracted from the application and packaged in a stand-alone source.  For\n * example, Bixby.js provides a suite of sources that are commonly required when\n * developing cloud services.\n *\n * Examples:\n *\n *    IoC.use(IoC.dir('app'));\n *\n * @return {function}\n * @public\n */\nmodule.exports = function(options) {\n  if ('string' == typeof options) {\n    options = { dirname: options }\n  }\n  options = options || {};\n  var dirname = options.dirname || 'app'\n    , extensions = options.extensions\n    , dir = path.resolve(dirname);\n  \n  return function app(id) {\n    var aid = path.join(dir, id)\n      , script = scripts.resolve(aid, extensions);\n    \n    if (!existsSync(script)) { return; }\n    return require(script);\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-electrolyte/node_modules/electrolyte/lib/sources/node_modules.js":"/**\n * Sources node modules as objects.\n *\n * This source allows node modules to be injected as dependencies.\n *\n * This functionality is especially useful when developing objects that perform\n * network I/O.  For example, the MySQL module can be injected by `@require`ing\n * `mysql`.  Test cases can then easily swap the `mysql` module for a mock\n * module that allows unit tests to be written without requiring database\n * access.\n *\n * Examples:\n *\n *    IoC.use(IoC.node_modules());\n *\n * @return {function}\n * @public\n */\nmodule.exports = function() {\n  \n  return function(id) {\n    try {\n      var module = require(id);\n      module['@literal'] = true;\n      return module;\n    } catch (ex) {\n      return;\n    }\n  };\n};\n"}